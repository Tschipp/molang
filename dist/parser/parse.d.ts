import { Tokenizer } from '../tokenizer/Tokenizer';
import { TTokenType, Token } from '../tokenizer/token';
import { IPrefixParselet } from './parselets/prefix';
import { IInfixParselet } from './parselets/infix';
import { IExpression } from './expression';
import { ExecutionEnvironment } from '../env/env';
import { IParserConfig } from '../main';
export declare class Parser {
    config: Partial<IParserConfig>;
    protected prefixParselets: Map<string, IPrefixParselet>;
    protected infixParselets: Map<string, IInfixParselet>;
    protected readTokens: Token[];
    protected tokenIterator: Tokenizer;
    executionEnv: ExecutionEnvironment;
    constructor(config: Partial<IParserConfig>);
    updateConfig(config: Partial<IParserConfig>): void;
    init(expression: string): void;
    setTokenizer(tokenizer: Tokenizer): void;
    setExecutionEnvironment(executionEnv: ExecutionEnvironment): void;
    parseExpression(precedence?: number): IExpression;
    parseInfixExpression(expressionLeft: IExpression, precedence?: number): IExpression;
    getPrecedence(): number;
    consume(expected?: TTokenType): Token;
    match(expected: TTokenType, consume?: boolean): boolean;
    lookAhead(distance: number): Token;
    registerInfix(tokenType: TTokenType, infixParselet: IInfixParselet): void;
    registerPrefix(tokenType: TTokenType, prefixParselet: IPrefixParselet): void;
    getInfix(tokenType: TTokenType): IInfixParselet | undefined;
    getPrefix(tokenType: TTokenType): IPrefixParselet | undefined;
}
